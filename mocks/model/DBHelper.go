// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"

	user "sample/twirp/rpc/user"

	userModel "sample/twirp/model/user"
)

// DBHelper is an autogenerated mock type for the DBHelper type
type DBHelper struct {
	mock.Mock
}

// FindUserById provides a mock function with given fields: db, id
func (_m *DBHelper) FindUserById(db sqlx.DB, id int) *userModel.User {
	ret := _m.Called(db, id)

	var r0 *userModel.User
	if rf, ok := ret.Get(0).(func(sqlx.DB, int) *userModel.User); ok {
		r0 = rf(db, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userModel.User)
		}
	}

	return r0
}

// InsertOne provides a mock function with given fields: db, _a1
func (_m *DBHelper) InsertOne(db sqlx.DB, _a1 *user.User) int64 {
	ret := _m.Called(db, _a1)

	var r0 int64
	if rf, ok := ret.Get(0).(func(sqlx.DB, *user.User) int64); ok {
		r0 = rf(db, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// indUserByEmail provides a mock function with given fields: db, email
func (_m *DBHelper) indUserByEmail(db sqlx.DB, email string) *userModel.User {
	ret := _m.Called(db, email)

	var r0 *userModel.User
	if rf, ok := ret.Get(0).(func(sqlx.DB, string) *userModel.User); ok {
		r0 = rf(db, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userModel.User)
		}
	}

	return r0
}
