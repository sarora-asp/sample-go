// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"
	todo "sample/twirp/rpc/todo"

	mock "github.com/stretchr/testify/mock"
)

// TOdoService is an autogenerated mock type for the TOdoService type
type TOdoService struct {
	mock.Mock
}

// CreateTodo provides a mock function with given fields: _a0, _a1
func (_m *TOdoService) CreateTodo(_a0 context.Context, _a1 *todo.Todo) (*todo.Response, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *todo.Response
	if rf, ok := ret.Get(0).(func(context.Context, *todo.Todo) *todo.Response); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*todo.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *todo.Todo) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTodo provides a mock function with given fields: _a0, _a1
func (_m *TOdoService) DeleteTodo(_a0 context.Context, _a1 *todo.Request) (*todo.Response, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *todo.Response
	if rf, ok := ret.Get(0).(func(context.Context, *todo.Request) *todo.Response); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*todo.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *todo.Request) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodo provides a mock function with given fields: _a0, _a1
func (_m *TOdoService) GetTodo(_a0 context.Context, _a1 *todo.Request) (*todo.Response, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *todo.Response
	if rf, ok := ret.Get(0).(func(context.Context, *todo.Request) *todo.Response); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*todo.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *todo.Request) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodos provides a mock function with given fields: _a0, _a1
func (_m *TOdoService) GetTodos(_a0 context.Context, _a1 *todo.Empty) (*todo.Response, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *todo.Response
	if rf, ok := ret.Get(0).(func(context.Context, *todo.Empty) *todo.Response); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*todo.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *todo.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTodo provides a mock function with given fields: _a0, _a1
func (_m *TOdoService) UpdateTodo(_a0 context.Context, _a1 *todo.Request) (*todo.Response, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *todo.Response
	if rf, ok := ret.Get(0).(func(context.Context, *todo.Request) *todo.Response); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*todo.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *todo.Request) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
