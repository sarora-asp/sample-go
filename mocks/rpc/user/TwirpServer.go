// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// TwirpServer is an autogenerated mock type for the TwirpServer type
type TwirpServer struct {
	mock.Mock
}

// PathPrefix provides a mock function with given fields:
func (_m *TwirpServer) PathPrefix() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ProtocGenTwirpVersion provides a mock function with given fields:
func (_m *TwirpServer) ProtocGenTwirpVersion() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ServeHTTP provides a mock function with given fields: _a0, _a1
func (_m *TwirpServer) ServeHTTP(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// ServiceDescriptor provides a mock function with given fields:
func (_m *TwirpServer) ServiceDescriptor() ([]byte, int) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}
